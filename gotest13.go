/*
协程也叫轻量级线程。与传统的进程和线程相比，
协程最大的优点就在于其足够“轻”，
操作系统可以轻松创建上百万个协程而不会导致系统资源枯竭，
而线程和进程通常最多不过近万个。
而多数语言在语法层面上是不支持协程的，一般都是通过库的方式进行支持，
但库的支持方式和功能不够完善，经常会引发阻塞等一系列问题，
而 Go 语言在语法层面上支持协程，也叫goroutine。
这让协程变得非常简单，让轻量级线程的切换管理不再依赖于系统的进程和线程，
也不依赖 CPU 的数量。
*/
package main

import "fmt"

func add(a, b int) {
	c := a + b
	fmt.Println(c)
}

func main(){
	for i := 0; i<10; i++ {
		go add(i,i)
	}
}
/*
启动的 10 个goroutine还没来得及执行 Add()函数，所以程序不会有任何输出。也就是说主goroutine并不会等待其他goroutine执行结束。那么如何解决这个问题呢？
Go 语言提供的信道（channel）就是专门解决并发通信问题的
*/